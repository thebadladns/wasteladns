# set -x
cd "$(dirname "$0")"    # change to script's directory 

# TODO:
# only compile if single file timestamp is older than last modified timestamp of any shader
# make a release build

# usage
# shader_build.sh [file|]
# running with no parameters compiles all shaders
# Make sure glslangValidator is in your path 
unset debug
unset release

# unpack args
# detect whether the first parameter is not an argument. If so, it will be parsed as a file
if ! [[ -z "$1" ]] && [[ "$1"!="debug" ]] && [[ "$1"!="release" ]]; then
    file='1';
    for arg in "${@:2}"; do declare $arg='1'; done
else
    unset file
    for arg in "$@"; do declare $arg='1'; done
fi;

if [ -z ${release} ]; then debug='1'; fi # -z to check if var is unset or empty
if [ ${debug} ]; then unset release; fi
if [ ${release} ]; then unset debug; fi

# check for single file compilation
unset ext
if [ ${file} ]; then
    if test -f ${1}; then
        ext=".${1##*.}";
    else
        echo "Could not find file $1"
        exit 1;
    fi
fi

# compile constants
ext_vs_gl33=".vert"
ext_ps_gl33=".frag"
compileflags_vs_gl33=
compileflags_ps_gl33=
# compilecheck_gl33=glslangValidator -v >nul 2>&1
compile_gl33="glslangValidator"
shaderdirs_gl33="helpers/gfx/shader_src_gl33/ shader_src_gl33/"
outfilename_gl33="shader_output_gl33.h"
	
# single file compilation: auto-detect parameters
compile_all='1'
# for openGL, we paste the whole shader as a C++ string literal,
# so we need to update the whole collection on each file compile
collect_all='1'
unset compile_single
if [[ "${ext}" == "${ext_vs_gl33}" ]]; then
	compile_single=${compile_gl33}
	compile_flags=${compileflags_vs_gl33}
	unset compile_all
fi
if [[ "${ext}" == "${ext_ps_gl33}" ]]; then
	compile_single=${compile_gl33}
	compile_flags=${compileflags_ps_gl33}
	unset compile_all
fi

# compile a single file
if ! [ -z ${compile_single} ]; then	
    ${compile_single} $1 ${compile_flags}
	if [ $? -ne 0 ]; then unset collect_all; fi
fi

# compile all OpenGL3.3 shaders
if [ ${compile_all} ]; then
	for dir in ${shaderdirs_gl33}; do
		for f in ${dir}*${ext_vs_gl33}; do ${compile_gl33} ${f} ${compileflags_vs_gl33}; done
		for f in ${dir}*${ext_vs_gl33}; do ${compile_gl33} ${f} ${compileflags_ps_gl33}; done
    done;
fi

# collect all OpenGL3.3 shaders
if [ ${collect_all} ]; then
    datetime=`date '+%a %Y/%m/%d %H:%M:%S'`
	for dir in ${shaderdirs_gl33}; do
        outfile=${dir}${outfilename_gl33}
		echo Generating file ${outfile}
		echo // THIS FILE HAS BEEN AUTOGENERATED, DO NOT MODIFY > ${outfile}
		echo // Generated on ${datetime} >> ${outfile}
		printf "// To edit shaders, edit the files inside the \`${dir}\` folder,\n" >> ${outfile}
		printf "// then run build_shaders.[sh|bat]\n" >> ${outfile}
		echo ""  >> ${outfile}
		echo namespace gfx { >> ${outfile}
		echo namespace shaders { >> ${outfile}
		echo "" >> ${outfile}
		for f in ${dir}*${ext_vs_gl33} ${dir}*${ext_ps_gl33}; do
            file_nopath=$(basename "$f")
            name=${file_nopath%.*}
			printf "namespace ${name} {\n" >> ${outfile}
			printf "const char* name = \"${name}\";\n" >> ${outfile}
			printf "#if __DEBUG\n" >> ${outfile}
			printf "const char* binFile = \"${outfile}\";\n" >> ${outfile}
			printf "const char* srcFile = \"${f}\";\n" >> ${outfile}
			printf "#endif // __DEBUG\n" >> ${outfile}
			echo const char* src =  >> ${outfile}
			printf "R\"(\n" >> ${outfile}
			cat ${f} >> ${outfile}
			printf ")\";\n}\n\n" >> ${outfile}
        done
		echo }} // gfx::shaders >>${outfile}
    done
fi

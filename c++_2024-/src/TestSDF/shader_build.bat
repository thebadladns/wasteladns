@echo off

where cl >nul 2>nul
if %errorlevel% neq 0 echo Setting up Visual Studio compiler & call ..\..\setupvcvars.bat

REM defer setlocal till after we've setup the Visual Studio variables
REM we are going to use variables within nested loops, so we need enabledelayedexpansion as well as to use !variable!  
setlocal enabledelayedexpansion
REM switch to file's directory
cd /D "%~dp0"

REM Before running this bat file, if targeting DirectX11, you need to call either vcvars64.bat or vcvarsall.bat.
REM These are usually located in Visual Studio's installation files: C:\Program Files (x86)\Microsoft Visual Studio\{Year}\{Edition}\VC\Auxiliary\Build\
REM Otherwise, for OpenGl, make sure glslangValidator is in your path 

REM TODO:
REM only compile if single file timestamp is older than last modified timestamp of any shader
REM make a release build

REM usage
REM shader_build.bat [dx11|gl33|]
REM shader_build.bat file
REM defaults to dx11 all
REM running with a file as the first argument, if correct, autodetects the graphics API and shader stage

REM initialize values, in case setlocal is not used
set debug=0
set release=0
set dx11=0
set gl33=0

REM detect whether the first parameter is not an argument
set file=1
for %%p in ("" "debug" "release" "dx11" "gl33") do if "%1" == %%p set file=0

REM unpack args
for %%a in (%*) do set "%%a=1"
if "%debug%" == "1" set release=0
if "%release%" == "1" set debug=0
if "%dx11%" =="1" set gl33=0
if "%gl33%" == "1" set dx11=0
REM defaults
if "%release%" == "0" if "%debug%"=="0" set debug=1
if "%dx11%" == "0" if "%gl33%"=="0" (
	set dx11=1
	set gl33=1
)

REM check for single file compilation
set ext=0
if "%file%" == "1" (
	if exist "%1" (
		set ext=%~x1
	) else (
		echo Could not not find file %1
		exit /b 1 
	)
)

REM compile contants
set ext_vs_dx11=.vs
set ext_ps_dx11=.ps
set ext_vs_gl33=.vert
set ext_ps_gl33=.frag
set compileflags_vs_dx11=/nologo /T vs_5_0 /Ges /Zi /E VS /Fh
set compileflags_ps_dx11=/nologo /T ps_5_0 /Ges /Zi /E PS /Fh
set compileflags_vs_gl33=
set compileflags_ps_gl33=
REM set compilecheck_dx11=fxc /help >nul 2>&1
set compile_dx11=fxc
set shaderdirs_dx11=helpers\gfx\shader_src_dx11\ shader_src_dx11\
set outfilename_dx11=shader_output_dx11.h
REM set compilecheck_gl33=glslangValidator -v >nul 2>&1
set compile_gl33=glslangValidator
set shaderdirs_gl33=helpers\gfx\shader_src_gl33\ shader_src_gl33\
set outfilename_gl33=shader_output_gl33.h
	
REM single file compilation: auto-detect parameters
set compile_all=1
set collect_all=1
set compile_flags=0
set compile_single=0
if "!ext!" == "%ext_vs_gl33%" (
	set dx11=0
	set gl33=1
	set compile_single=%compile_gl33%
	set compile_flags=%compileflags_vs_gl33%
	set compile_all=0
	REM for openGL, we paste the whole shader as a C++ string literal, so we need to update the whole collection on each file compile
	set collect_all=1
)
if "!ext!" == "%ext_ps_gl33%" (
	set dx11=0
	set gl33=1
	set compile_single=%compile_gl33%
	set compile_flags=%compileflags_ps_gl33%
	set compile_all=0
	REM for openGL, we paste the whole shader as a C++ string literal, so we need to update the whole collection on each file compile
	set collect_all=1
)
if "!ext!" == "%ext_vs_dx11%" (
	set dx11=1
	set gl33=0
	set compile_single=%compile_dx11%
	set compile_flags=%compileflags_vs_dx11%
	set compile_all=0
	set collect_all=0
)
if "!ext!" == "%ext_ps_dx11%" (
	set dx11=1
	set gl33=0
	set compile_single=%compile_dx11%
	set compile_flags=%compileflags_ps_dx11%
	set compile_all=0
	set collect_all=0
)

REM compile a single file
if not "!compile_single!"=="0" (
	!compile_single! %1 !compile_flags!
	if not "!errorlevel!"=="0" set collect_all=0
)

REM compile all DirectX11 shaders
if "!compile_all!"=="1" if "!dx11!"=="1" (
	for %%d in (%shaderdirs_dx11%) do (
		for %%v in (%%d*%ext_vs_dx11%) do ( %compile_dx11% "%%v" %compileflags_vs_dx11%>nul )
		for %%v in (%%d*%ext_ps_dx11%) do ( %compile_dx11% "%%v" %compileflags_ps_dx11%>nul )
	)
)
REM collect all DirectX11 shaders
if "!collect_all!"=="1" if "!dx11!"=="1" (
	REM Day YYYY/mm/dd HH:MM:SS
	set datetime=%date:~0,3% %date:~10,4%/%date:~4,2%/%date:~7,2% %time:~0,2%:%time:~3,2%:%time:~6,2%
	for %%d in (%shaderdirs_dx11%) do (
		set outfile=%%d%outfilename_dx11%
		set shader_dir=%%d
		set dir_forwardslash=!shader_dir:\=/!
		echo Generating file !outfile!
		echo // THIS FILE HAS BEEN AUTOGENERATED, DO NOT MODIFY>!outfile!
		echo // Generated on !datetime!>>!outfile!
		echo // To edit shaders, edit the files inside the `!dir_forwardslash!` folder,>>!outfile!
		echo // then run `build_shaders.bat`>>!outfile!
		echo.>>!outfile!
		echo namespace gfx {>>!outfile!
		echo namespace shaders {>>!outfile!
		echo.>>!outfile!
		for %%f in (%%d*%ext_vs_dx11% %%d*%ext_ps_dx11%) do (
			set filename=%%~f
			set filename_forwardslashes=!filename:\=/!
			echo namespace %%~nf {>>!outfile!
			echo const char* name = "%%~nf";>>!outfile!
			echo #if __DEBUG>>!outfile!
			echo const char* binFile = "!dir_forwardslash!%%~nf.h";>>!outfile!
			echo const char* srcFile = "!filename_forwardslashes!";>>!outfile!
			echo #endif // __DEBUG>>!outfile!
			echo #include "%%~nf.h">>!outfile!
			echo }>>!outfile!
			echo.>>!outfile!
		)
		echo }} // gfx::shaders >>!outfile!
	)
)

REM compile all OpenGL3.3 shaders
if "!compile_all!"=="1" if "!gl33!"=="1" (
	for %%d in (%shaderdirs_gl33%) do (
		for %%v in (%%d*%ext_vs_gl33%) do ( %compile_gl33% "%%v" %compileflags_vs_gl33%>nul )
		for %%v in (%%d*%ext_ps_gl33%) do ( %compile_gl33% "%%v" %compileflags_ps_gl33%>nul )
	)
)
REM collect all OpenGL3.3 shaders
if "!collect_all!"=="1" if "!gl33!"=="1" (
	REM Day YYYY/mm/dd HH:MM:SS
	set datetime=%date:~0,3% %date:~10,4%/%date:~4,2%/%date:~7,2% %time:~0,2%:%time:~3,2%:%time:~6,2%
	for %%d in (%shaderdirs_gl33%) do (
		set outfile=%%d%outfilename_gl33%
		set outfile_forwardslash=!outfile:\=/!
		set shader_dir=%%d
		set dir_forwardslash=!shader_dir:\=/!
		echo Generating file !outfile_forwardslash!
		echo // THIS FILE HAS BEEN AUTOGENERATED, DO NOT MODIFY>!outfile!
		echo // Generated on !datetime!>>!outfile!
		echo // To edit shaders, edit the files inside the `!dir_forwardslash!` folder,>>!outfile!
		echo // then run build_shaders.^[sh^|bat^]>>!outfile!
		echo.>>!outfile!
		echo namespace gfx {>>!outfile!
		echo namespace shaders {>>!outfile!
		echo.>>!outfile!
		for %%f in (%%d*.vert,%%d*.frag) do (
			set filename=%%~f
			set filename_forwardslashes=!filename:\=/!
			echo namespace %%~nf {>>!outfile!
			echo const char* name = "%%~nf";>>!outfile!
			echo #if __DEBUG>>!outfile!
			echo const char* binFile = "!outfile_forwardslash!";>>!outfile!
			echo const char* srcFile = "!filename_forwardslashes!";>>!outfile!
			echo #endif // __DEBUG>>!outfile!
			echo const char* src = >>!outfile!
			echo R^"^(>>!outfile!
			type %%f>>!outfile!
			echo ^)^";>>!outfile!
			echo }>>!outfile!
			echo.>>!outfile!
		)
		echo }} // gfx::shaders >>!outfile!
	)
)
